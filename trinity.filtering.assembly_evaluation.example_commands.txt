
# load Trinity modules
module purge
module load gcc/4.8.2
module load gcc/4.9.1
module load boost/1.57.0
module load perl/5.10.1
module load python/3.3.2
module load bowtie
module load samtools/0.1.19
module load trinity/2.2.0
module load blast/2.2.29+
module load hmmer/3.1b2
module load augustus/3.2.2
module load busco/1.1b1
module load cdhit/4.6.5

# assemble rRNA reads
trinity/trinityrnaseq-2.2.0/Trinity --seqType fq --min_kmer_cov 1 --max_memory 512G --CPU 64 --left left_reads.rrna_merged_fwd.fq.gz --right right_reads.rrna_merged_rev.fq.gz --full_cleanup
mv trinity_out_dir.Trinity.fasta out.rrna.fa

# BLAST rRNA contigs to diatom SSU database
blastn -query out.rrna.fa -db blast_ssu_rrna_database/diatom_ssu.fa -max_target_seqs 1 -max_hsps 1 -num_threads 64 -outfmt 6 > out.top_SSU_hit.blastn

# assemble organelle reads
trinity/trinityrnaseq-2.2.0/Trinity --seqType fq --min_kmer_cov 1 --max_memory 512G --CPU 64 --left left_reads.organelle_merged_fwd.fq.gz --right right_reads.organelle_merged_rev.fq.gz --full_cleanup
mv trinity_out_dir.Trinity.fasta out.organelle.fa

# assemble nuclear reads
trinity/trinityrnaseq-2.2.0/Trinity --seqType fq --min_kmer_cov 1 --max_memory 512G --CPU 64 --left left_reads.nuclear_merged_fwd.fq.gz --right right_reads.nuclear_merged_rev.fq.gz --full_cleanup
sed 's/|/_/' trinity_out_dir.Trinity.fasta > m
perl -anwe 'if(/^>/){print "$F[0] out\n"}else{print}' m > out.nuclear.fa

# print assembly report
trinity/trinityrnaseq-2.2.0/util/TrinityStats.pl out.nuclear.fa > out.nuclear.stats

# estimate nuclear transcript abundance with RSEM
trinity/trinityrnaseq-2.2.0/util/align_and_estimate_abundance.pl --thread_count 64 --transcripts out.nuclear.fa --seqType fq --left left_reads.trimmed_filtered_1.fq.gz --right right_reads.trimmed_filtered_2.fq.gz --est_method RSEM --aln_method bowtie --trinity_mode --prep_reference --output_dir out.RSEM

# assess assembly quality with transrate
transrate/transrate-1.0.1-linux-x86_64/transrate --threads 64 --assembly out.nuclear.fa --left left_reads.trimmed_filtered_1.fq.gz --right right_reads.trimmed_filtered_2.fq.gz --reference diatom_protein_dbs/phaeoAA.fa
mv transrate_results/assemblies.csv transrate.csv

# identify number of conserved orthologs with BUSCO
python3 BUSCO_v1.2/BUSCO_v1.2.py -o out.BUSCO -in out.nuclear.fa -l busco_dbs/eukaryota -m trans -c 64 



module purge
module load perl/5.10.1
module load hmmer/3.1b2
module load trinity/2.0.2
module load transdecoder/2.0.1
module load cdhit/4.6.5

# TransDecoder to translate nuclear contigs
# TransDecoder step 1: Predict all long open reading frames
TransDecoder.LongOrfs -t out.nuclear.fa

# TransDecoder step 2: Homology searches to SwissProt and Pfam
# TransDecoder step 2.1: Parallel BLAST search long ORFs from Step 1 to SwissProt db
cat out.nuclear.fa.transdecoder_dir/longest_orfs.pep | parallel/20150822/bin/parallel --will-cite --block 100k --progress --recstart '>' --pipe blast/ncbi-blast-2.2.29+/bin/blastp -outfmt 6 -max_target_seqs 1 -evalue 1e-3 -db swissprot_db/uniprot_sprot.fasta -num_threads 4 -query - > uniref.blastp

# TransDecoder step 2.2: HMMR search search long ORFs to Pfam database
hmmscan --cpu 16 --domtblout pfam.domtblout pfam_db/Pfam-A.hmm out.nuclear.fa.transdecoder_dir/longest_orfs.pep

# TransDecoder step 3: Use Transdecoder to translate nuclear contigs using homology search information
TransDecoder.Predict -t out.nuclear.fa --retain_pfam_hits pfam.domtblout --retain_blastp_hits uniref.blastp

# Run CD-HIT to remove redundant/overlapping contigs
cdhit/v4.6.5/cd-hit -i out.nuclear.fa.transdecoder.pep -o out.cd-hit.pep -c 0.99 -n 5 -d 1000 -M 64000 -T 0
rm -r *.clstr out.nuclear.fa.transdecoder_dir out.nuclear.fa.transdecoder.gff3 out.nuclear.fa.transdecoder.bed *.bowtie.* pfam.domtblout uniref.blastp



